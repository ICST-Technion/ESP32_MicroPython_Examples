
This code uses the MicroPython uasyncio library to concurrently run two tasks on an ESP32: blinking the built-in LED and printing "Hello, World!" to the console.



Function Explanations:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1.blink_led()

Purpose: Toggles the built-in LED on and off in 1-second intervals.

How it works:
	1.The LED is turned on using led.on() and off using led.off().
	2.await asyncio.sleep(1) pauses the task for 1 second, allowing other tasks to execute in the meantime.

Key Use: Demonstrates asynchronous control of hardware (LED).

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. print_message()

Purpose: Prints "Hello, World!" to the console every 2 seconds.

How it works:
	1.Prints the message using print().
	2.await asyncio.sleep(2) pauses the task for 2 seconds, allowing the LED blinking task to execute.

Key Use: Demonstrates non-blocking periodic task execution.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. main()

Purpose: Acts as the entry point for the asyncio event loop.

How it works:
	1.Uses asyncio.create_task() to start the blink_led and print_message tasks concurrently.
	2.Enters an infinite loop with await asyncio.sleep(1) to keep the program running without blocking.

Key Use: Manages task scheduling and keeps the event loop alive.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Program Execution:
1.The LED blinks on and off every 1 second.
2.The message "Hello, World!" is printed to the console every 2 seconds.
3.Tasks run concurrently thanks to the asynchronous nature of uasyncio.






Resources and websites:

1.https://www.chatgpt.com/
2.https://www.perplexity.ai/
3.https://github.com/peterhinch/micropython-async/blob/master/v3/docs/TUTORIAL.md#111-primitives